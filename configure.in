dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.59)

AC_INIT(bahamut-azzurra, 1.4.34, "devel@ml.azzurra.org", "bahamut-azzurra")

PACKAGE=bahamut-azzurra
VERSION="1.4.34"

AC_CANONICAL_TARGET

dnl AM_INIT_AUTOMAKE
AC_CONFIG_HEADER(include/setup.h)
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

dnl Checks for programs.
AC_PROG_CC
AC_ISC_POSIX
AC_AIX
AC_PROG_MAKE_SET
AC_PATH_PROG(RM,rm)
AC_PATH_PROG(CP,cp)
AC_PROG_INSTALL

dnl Checks for libraries.
dnl Replace `main' with a function in -lnsl:
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_FUNC(crypt,, AC_CHECK_LIB(crypt, crypt))
AC_CHECK_FUNC(res_mkquery, AC_DEFINE(HAVE_RES_MKQUERY), 
 AC_CHECK_LIB(resolv, res_mkquery, AC_DEFINE(HAVE_RES_MKQUERY) LIBS="$LIBS -lresolv",
  AC_CHECK_LIB(resolv, __res_mkquery, AC_DEFINE(HAVE___RES_MKQUERY) LIBS="$LIBS -lresolv",)))

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/param.h unistd.h string.h strings.h sys/syslog.h stdlib.h stddef.h stropts.h limits.h)
AC_CHECK_HEADER(malloc.h, AC_DEFINE(MALLOCH, <malloc.h>)) 
AC_MSG_CHECKING(MIN and MAX definition)
AC_EGREP_CPP(yes,
[
#if defined( HAVE_SYS_PARAM_H )
#include <sys/param.h>
#ifdef MIN
  yes
#endif
#endif
], AC_DEFINE(HAVE_MINMAX) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))


dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_CHECK_FUNCS(index strerror strtoken strtok inet_addr inet_ntoa inet_netof inet_aton)
AC_CHECK_FUNCS(gettimeofday lrand48 sigaction bzero bcmp bcopy dn_expand __dn_expand poll)
AC_CHECK_FUNCS(dn_skipname __dn_skipname getrusage times, break)

dnl taken from ircd's Config script

nonblock=no

AC_MSG_CHECKING(for posix (O_NONBLOCK) nonblocking sockets)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if defined(O_NONBLOCK)
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, O_NONBLOCK))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif
	exit(1);
}
], AC_DEFINE(NBLOCK_POSIX)
nonblock=yes
AC_MSG_RESULT(O_NONBLOCK),
AC_MSG_RESULT(no), AC_MSG_RESULT(can't tell))

if test $nonblock = no; then
AC_MSG_CHECKING(for bsd (O_NDELAY) nonblocking sockets)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if defined( O_NDELAY ) && !defined( NBLOCK_POSIX )
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, O_NDELAY))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif
	exit(1);
}
], AC_DEFINE(NBLOCK_BSD)
nonblock=yes
AC_MSG_RESULT(O_NDELAY),
AC_MSG_RESULT(no), AC_MSG_RESULT(can't tell))
fi

if test $nonblock = no; then
AC_MSG_CHECKING(for sysv (FIONBIO) nonblocking sockets)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if !defined(NBLOCK_BSD) && !defined(NBLOCK_POSIX) && defined(FIONBIO)
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, FIONBIO))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif /* !NBLOCK_POSIX && !NBLOCK_BSD && FIONBIO */
	exit(1);
}
], AC_DEFINE(NBLOCK_SYSV)
nonblock=yes
AC_MSG_RESULT(FIONBIO),
AC_MSG_RESULT(no),
AC_MSG_RESULT(unable to test))
fi

if test $nonblock = no; then
AC_MSG_ERROR(No nonblocking socket implementation found. ircd requires nonblocking sockets.)
fi

dnl taken from ircd's Config script
AC_MSG_CHECKING(signal implementation)
AC_TRY_RUN(
[
int main()
{
#if defined(HAVE_SIGACTION)
	exit(0);
#else
	exit(1);
#endif
}
], AC_DEFINE(POSIX_SIGNALS) AC_MSG_RESULT(posix),
    AC_TRY_RUN(
[
#include <signal.h>
int calls = 0;
void handler()
{
	if (calls) return;
 	calls++;
	kill(getpid(), SIGTERM);
	sleep(1);
}
int main()
{
	signal(SIGTERM, handler);
	kill(getpid(), SIGTERM);
	exit (0);
}
], AC_DEFINE(BSD_RELIABLE_SIGNALS) AC_MSG_RESULT(bsd),
    AC_DEFINE(SYSV_UNRELIABLE_SIGNALS) AC_MSG_RESULT(sysv), AC_MSG_RESULT(uknown)),
AC_MSG_RESULT(unknown))
dnl Check for sys_errlist
dnl Stolen from BitchX
AC_MSG_CHECKING(for sys_errlist declaration)
AC_TRY_RUN([
#include <sys/types.h>
#include <stdio.h>
#include <errno.h>
main()
{
  char *s = sys_errlist[0];
	  exit(0);
}
],
  AC_MSG_RESULT(yes)
  AC_DEFINE(SYS_ERRLIST_DECLARED),
  AC_MSG_RESULT(no), AC_MSG_RESULT(cross compiling))

dnl Check to see if we should set USE_FAST_FD_ISSET
AC_MSG_CHECKING(to see if we should enable fast FD_ISSET code)
AC_TRY_COMPILE(, [
#include <sys/types.h>

int main()
{
  fd_set read_set;
  read_set.fds_bits;
  exit(0);
}
], 
  AC_MSG_RESULT(yes)
  AC_DEFINE(USE_FAST_FD_ISSET),
  AC_MSG_RESULT(no))

dnl Check to see if we have a broken FD_SETSIZE

DFDSS='-DFD_SETSIZE=1024'

AC_MSG_CHECKING(to see if FD_SETSIZE is broken)
AC_TRY_RUN([
#define FD_SETSIZE 666
#include <sys/types.h>
#include <sys/time.h>

int main()
{
  if(FD_SETSIZE != 666)
     exit(1);
  exit(0);
}
], 
AC_MSG_RESULT(no),
[
AC_MSG_RESULT(YES)
AC_MSG_WARN(FD_SETSIZE is hard set by your operating system)
AC_MSG_WARN(MAXCONNECTIONS must be no higher than the hardwired FD_SETSIZE)
AC_MSG_WARN(If you're using a system that supports it use the poll call instead of select.)
DFDSS=' # FD_SETSIZE is broken on this machine!'
],
AC_MSG_RESULT(can't tell))

AC_SUBST(DFDSS)

# ---------- check for openssl, half stolen from openssh

tryssl=""

AC_ARG_WITH(ssl-dir, 
[  --with-ssl-dir=PATH     Path to openssl installation ],
[ tryssl=$withval ]
)

save_SSLINC=""
save_LIBS="$LIBS"
save_CPPFLAGS="$CPPFLAGS"
save_CFLAGS="$CFLAGS"

found_openssl=""

   for ssldir in $tryssl "" /usr/local/openssl /usr/lib/openssl \
       /usr/local/ssl /usr/lib/ssl /usr/local /usr/pkg /opt \
       /opt/openssl ; do
      LIBS="$save_LIBS -lcrypto -lssl"
      SSLINC="$save_SSLINC"

      # if the directory isn't null, but doesn't exist, skip it
      if test ! -z "$ssldir" -a ! -d "$ssldir" ; then
         continue
      fi

      # this test is in openssh, I guess there's a good reason?
      if test ! -z "$ssldir" -a "z$ssldir" != "z/usr"; then
         # try to use ssldir/lib for libraries, if it exists
         if test -d "$ssldir/lib" ; then
            LIBS="-L$ssldir/lib -lcrypto -lssl $save_LIBS"
         else
            LIBS="-L$ssldir -lcrypto -lssl $save_LIBS"
         fi

         if test -d "$ssldir/include" ; then
            SSLINC="-I$ssldir/include"
            CPPFLAGS="$SSLINC $save_CPPFLAGS"
         else
            SSLINC="-I$ssldir"
            CPPFLAGS="$SSLINC $save_CPPFLAGS"
         fi
      fi

      AC_TRY_RUN(
                 [
#include <stdio.h>
#include <string.h>
#include <openssl/rand.h>
#include <openssl/opensslv.h>
#include <openssl/crypto.h>
#include <openssl/evp.h>
int main(void)
{
   FILE *fp;
   char a[2048];

   fp = fopen(".openssl_h_version", "w");
   if(fp)
   {
      fprintf(fp, "%s\n", OPENSSL_VERSION_TEXT);
      fclose(fp);
   }

   fp = fopen(".openssl_l_version", "w");
   if(fp)
   {
      fprintf(fp, "%s\n", SSLeay_version(SSLEAY_VERSION));
      fclose(fp);
   }

   memset(a, 0, 2048);
   RAND_add(a, 2048, 2048);
   if(RAND_status() <= 0)
      return 1;

   OpenSSL_add_all_ciphers();

   if (EVP_get_cipherbyname("aes-128-ecb") == NULL)
      return 1;
   return 0;
}
                 ],
                 [
                    found_openssl=1;
                 ], [], AC_MSG_RESULT(cross compiler)
      )
      if test ! -z "$found_openssl" ; then
         break;
      fi

   done

if test -z "$found_openssl"; then
  echo ""
  echo "I can't find OpenSSL on this system, or I found an older version."
  echo ""
  echo "bahamut requires OpenSSL version 0.9.7 or later"
  echo ""
  echo "If you have openssl, you may wish to run configure with the"
  echo "--with-ssl-dir=DIR option to specify the OpenSSL installation"
  echo "directory."
  echo ""
  echo "You can download openssl at http://www.openssl.org/"
  exit 1
fi

   if test -z "$ssldir" ; then
      ssldir="(system)"
   fi
   ac_cv_openssldir=$ssldir

AC_SUBST(SSLINC)
CPPFLAGS="$save_CPPFLAGS"
CFLAGS="$save_CFLAGS"
echo " - openssl library version: `cat .openssl_l_version`"
echo " - openssl header version : `cat .openssl_h_version`"
$RM -f .openssl_l_version .openssl_h_version

dnl end of openssl library test

dnl don't add more of these unless it's critical.  Trying to get rid of them.
AC_MSG_CHECKING(operating system)
case "$target" in
*-solaris2*) AC_DEFINE(OS_SOLARIS2) AC_MSG_RESULT(Solaris 2.x) ;;
*-aix*) AC_DEFINE(OS_AIX) AC_MSG_RESULT(AIX) ;;
*-esix*) AC_DEFINE(OS_ESIX) AC_MSG_RESULT(ESIX) ;;
*-next*) AC_DEFINE(OS_NEXT) AC_MSG_RESULT(NeXT something) ;;
*-mips*) AC_DEFINE(OS_MIPS) AC_MSG_RESULT(MIPS something) ;;
*-sequent-ptx*) AC_DEFINE(OS_DYNIXPTX) AC_MSG_RESULT(Dynix PTX) ;;
*-hpux*) AC_DEFINE(OS_HPUX) AC_MSG_RESULT(HP-UX) ;;
*) AC_MSG_RESULT(nothing special required) ;;
esac

AC_OUTPUT(Makefile src/Makefile tools/Makefile)

echo configuring zlib...
cd zlib
./configure
cd ..

if test ! -f include/options.h; then
	echo running ./config...
	./config
fi

# EOF
